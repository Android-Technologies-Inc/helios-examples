diff --git a/nft/pages/index.tsx b/nft/pages/index.tsx
index 1b2b156..7167907 100644
--- a/nft/pages/index.tsx
+++ b/nft/pages/index.tsx
@@ -26,22 +26,28 @@ declare global {
   }
 }
 
-const Home: NextPage = () => {
+export const SUPPORTED_WALLETS = [
+  "nami",
+  "flint",
+  "eternl",
+  "Fake - Does not exist",
+] as const;
+export type SUPPORTED_WALLETS_TYPE = typeof SUPPORTED_WALLETS[number];
 
+const Home: NextPage = () => {
   const optimize = false;
   const networkParamsUrl = "https://d1t0d7c2nekuk0.cloudfront.net/preprod.json";
   const [walletAPI, setWalletAPI] = useState<undefined | any>(undefined);
-  const [tx, setTx] = useState({ txId : '' });
-  const [walletInfo, setWalletInfo] = useState({ balance : ''});
+  const [tx, setTx] = useState({ txId: "" });
+  const [walletInfo, setWalletInfo] = useState({ balance: "" });
   const [walletIsEnabled, setWalletIsEnabled] = useState(false);
-  const [whichWalletSelected, setWhichWalletSelected] = useState(undefined);
-  
+  const [whichWalletSelected, setWhichWalletSelected] =
+    useState<SUPPORTED_WALLETS_TYPE>();
 
   useEffect(() => {
     const checkWallet = async () => {
-      
       setWalletIsEnabled(await checkIfWalletFound());
-    }
+    };
     checkWallet();
   }, [whichWalletSelected]); 
 
@@ -51,60 +57,51 @@ const Home: NextPage = () => {
         const api = await enableWallet();
         setWalletAPI(api);
       }
-    }
+    };
     enableSelectedWallet();
-  }, [walletIsEnabled]); 
+  }, [walletIsEnabled, whichWalletSelected]);
 
   useEffect(() => {
     const updateWalletInfo = async () => {
-
         if (walletIsEnabled) {
-            const _balance = await getBalance() as string;
+        const _balance = (await getBalance()) as string;
             setWalletInfo({
               ...walletInfo,
-              balance : _balance
+          balance: _balance,
             });
         }           
-    }
+    };
     updateWalletInfo();
   }, [walletAPI]);
 
   // user selects what wallet to connect to
   const handleWalletSelect = (obj : any) => {
-    const whichWalletSelected = obj.target.value
+    const whichWalletSelected = obj.target.value;
     setWhichWalletSelected(whichWalletSelected);
-  }
+  };
 
   const checkIfWalletFound = async () => {
+    if (!whichWalletSelected) return false;
       
-    let walletFound = false;
-
-    const walletChoice = whichWalletSelected;
-    if (walletChoice === "nami") {
-        walletFound = !!window?.cardano?.nami;
-    } else if (walletChoice === "eternl") {
-        walletFound = !!window?.cardano?.eternl;
-    } 
-    return walletFound;
-  }
+    if (!window.cardano) return false;
 
-  const enableWallet = async () => {
+    return !!window.cardano[whichWalletSelected];
+  };
 
+  const enableWallet = async () => {
       try {
         const walletChoice = whichWalletSelected;
-        if (walletChoice === "nami") {
-            const handle: Cip30Handle = await window.cardano.nami.enable();
-            const walletAPI = new Cip30Wallet(handle);
-            return walletAPI;
-          } else if (walletChoice === "eternl") {
-            const handle: Cip30Handle = await window.cardano.eternl.enable();
+
+      if (!walletChoice) return;
+
+      const handle: Cip30Handle = await window.cardano[walletChoice].enable();
             const walletAPI = new Cip30Wallet(handle);
             return walletAPI;
-          } 
     } catch (err) {
-        console.log('enableWallet error', err);
-    }
+      console.log("enableWallet error", err);
+      setWhichWalletSelected(undefined);
   }
+  };
 
   const getBalance = async () => {
     try {
@@ -114,13 +111,11 @@ const Home: NextPage = () => {
         const walletBalance : BigInt = BigInt(balanceAmount);
         return walletBalance.toLocaleString();
     } catch (err) {
-        console.log('getBalance error: ', err);
-    }
+      console.log("getBalance error: ", err);
   }
-
+  };
 
   const mintNFT = async (params : any) => {
-
     const address = params[0];
     const name = params[1];
     const description = params[2];
@@ -143,11 +138,16 @@ const Home: NextPage = () => {
     // Add the UTXO as inputs
     tx.addInputs(utxos[0]);
 
-    const mintScript =`minting nft
+    const mintScript =
+      `minting nft
 
-    const TX_ID: ByteArray = #` + utxos[0][0].txId.hex + `
+    const TX_ID: ByteArray = #` +
+      utxos[0][0].txId.hex +
+      `
     const txId: TxId = TxId::new(TX_ID)
-    const outputId: TxOutputId = TxOutputId::new(txId, ` + utxos[0][0].utxoIdx + `)
+    const outputId: TxOutputId = TxOutputId::new(txId, ` +
+      utxos[0][0].utxoIdx +
+      `)
     
     func main(ctx: ScriptContext) -> Bool {
         tx: Tx = ctx.tx;
@@ -155,7 +155,9 @@ const Home: NextPage = () => {
     
         assetclass: AssetClass = AssetClass::new(
             mph, 
-            "` + name + `".encode_utf8()
+            "` +
+      name +
+      `".encode_utf8()
         );
         value_minted: Value = tx.minted;
     
@@ -165,7 +167,7 @@ const Home: NextPage = () => {
                                         (input.output_id == outputId).trace("NFT2: ")
                                         }
         )
-    }`
+    }`;
     
     // Compile the helios minting script
     const mintProgram = Program.new(mintScript).compile(optimize);
@@ -175,45 +177,57 @@ const Home: NextPage = () => {
 
     // Construct the NFT that we will want to send as an output
     const nftTokenName = ByteArrayData.fromString(name).toHex();
-    const tokens: [number[], bigint][] = [[hexToBytes(nftTokenName), BigInt(1)]];
+    const tokens: [number[], bigint][] = [
+      [hexToBytes(nftTokenName), BigInt(1)],
+    ];
 
     // Create an empty Redeemer because we must always send a Redeemer with
     // a plutus script transaction even if we don't actually use it.
     const mintRedeemer = new ConstrData(0, []);
 
     // Indicate the minting we want to include as part of this transaction
-    tx.mintTokens(
-      mintProgram.mintingPolicyHash,
-      tokens,
-      mintRedeemer
-    )
+    tx.mintTokens(mintProgram.mintingPolicyHash, tokens, mintRedeemer);
 
     // Construct the output and include both the minimum Ada as well as the minted NFT
-    tx.addOutput(new TxOutput(
+    tx.addOutput(
+      new TxOutput(
       Address.fromBech32(address),
-      new Value(minAdaVal.lovelace, new Assets([[mintProgram.mintingPolicyHash, tokens]]))
-    ));
+        new Value(
+          minAdaVal.lovelace,
+          new Assets([[mintProgram.mintingPolicyHash, tokens]])
+        )
+      )
+    );
 
     // Add the collateral utxo
     tx.addCollateral(colatUtxo);
 
     const networkParams = new NetworkParams(
-      await fetch(networkParamsUrl)
-          .then(response => response.json())
-    )
+      await fetch(networkParamsUrl).then((response) => response.json())
+    );
 
     // Attached the metadata for the minting transaction
-    tx.addMetadata(721, {"map": [[mintProgram.mintingPolicyHash.hex, {"map": [[name, 
+    tx.addMetadata(721, {
+      map: [
+        [
+          mintProgram.mintingPolicyHash.hex,
+          {
+            map: [
+              [
+                name,
                                       {
-                                        "map": [["name", name], 
+                  map: [
+                    ["name", name],
                                                 ["description", description],
-                                                ["image", img]
-                                              ]
-                                      }
-                                  ]]}
-                                ]]
-                        }
-                  );
+                    ["image", img],
+                  ],
+                },
+              ],
+            ],
+          },
+        ],
+      ],
+    });
 
     console.log("tx before final", tx.dump());
 
@@ -230,46 +244,68 @@ const Home: NextPage = () => {
     
     console.log("txHash", txHash);
     setTx({ txId: txHash.hex });
-  
-   } 
-
+  };
 
   return (
     <div className={styles.container}>
       <Head>
         <title>Helios Tx Builder</title>
-        <meta name="description" content="Littercoin web tools page" />
-        <link rel="icon" href="/favicon.ico" />
+        <meta name='description' content='Littercoin web tools page' />
+        <link rel='icon' href='/favicon.ico' />
       </Head>
 
       <main className={styles.main}>
-        <h3 className={styles.title}>
-          Helios Tx Builder
-        </h3>
+        <h3 className={styles.title}>Helios Tx Builder</h3>
    
         <div className={styles.borderwallet}>
+          <p>Connect to your wallet</p>
+          {SUPPORTED_WALLETS.map((wallet) => (
+            <p key={wallet} className={styles.borderwallet}>
+              <input
+                type='radio'
+                id={wallet}
+                name='wallet'
+                value={wallet}
+                onChange={handleWalletSelect}
+              />
+              <label>{wallet}</label>
+            </p>
+          ))}
+        </div>
+        {!tx.txId && walletIsEnabled && (
+          <div className={styles.border}>
+            <WalletInfo walletInfo={walletInfo} />
+          </div>
+        )}
+        {tx.txId && (
+          <div className={styles.border}>
+            <b>Transaction Success!!!</b>
             <p>
-              Connect to your wallet 
+              TxId &nbsp;&nbsp;
+              <a
+                href={"https://preprod.cexplorer.io/tx/" + tx.txId}
+                target='_blank'
+                rel='noopener noreferrer'
+              >
+                {tx.txId}
+              </a>
             </p>
-            <p className={styles.borderwallet}>
-              <input type="radio" id="nami" name="wallet" value="nami" onChange={handleWalletSelect}/>
-                <label>Nami</label>
+            <p>
+              Please wait until the transaction is confirmed on the blockchain
+              and reload this page before doing another transaction
             </p>
           </div>
-            {!tx.txId && walletIsEnabled && <div className={styles.border}><WalletInfo walletInfo={walletInfo}/></div>}
-            {tx.txId && <div className={styles.border}><b>Transaction Success!!!</b>
-            <p>TxId &nbsp;&nbsp;<a href={"https://preprod.cexplorer.io/tx/" + tx.txId} target="_blank" rel="noopener noreferrer" >{tx.txId}</a></p>
-            <p>Please wait until the transaction is confirmed on the blockchain and reload this page before doing another transaction</p>
-          </div>}
-          {walletIsEnabled && !tx.txId && <div className={styles.border}><MintNFT onMintNFT={mintNFT}/></div>}
-
+        )}
+        {walletIsEnabled && !tx.txId && (
+          <div className={styles.border}>
+            <MintNFT onMintNFT={mintNFT} />
+          </div>
+        )}
       </main>
 
-      <footer className={styles.footer}>
-
-      </footer>
+      <footer className={styles.footer}></footer>
     </div>
-  )
-}
+  );
+};
 
 export default Home
\ No newline at end of file
