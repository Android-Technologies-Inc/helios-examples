{"version":3,"file":"index.jsx","sourceRoot":"","sources":["index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,OAAO,MAAM,uBAAuB,CAAC;AAC5C,OAAO,IAAI,MAAM,WAAW,CAAA;AAE5B,OAAO,MAAM,MAAM,2BAA2B,CAAA;AAC9C,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAC5C,OAAO,UAAU,MAAM,0BAA0B,CAAC;AAClD,OAAO,EACL,MAAM,EACN,OAAO,EACP,aAAa,EAEb,WAAW,EACX,UAAU,EACV,UAAU,EACV,aAAa,EACb,OAAO,EACP,KAAK,EACL,QAAQ,EACR,EAAE,EACF,YAAY,EAAC,MAAM,oBAAoB,CAAC;AAQ1C,IAAM,IAAI,GAAa;IAErB,IAAM,QAAQ,GAAG,KAAK,CAAC;IACvB,IAAM,gBAAgB,GAAG,oDAAoD,CAAC;IACxE,IAAA,KAA4B,QAAQ,CAAkB,SAAS,CAAC,EAA/D,SAAS,QAAA,EAAE,YAAY,QAAwC,CAAC;IACjE,IAAA,KAAc,QAAQ,CAAC,EAAE,IAAI,EAAG,EAAE,EAAE,CAAC,EAApC,EAAE,QAAA,EAAE,KAAK,QAA2B,CAAC;IACtC,IAAA,KAA8B,QAAQ,CAAC,EAAE,OAAO,EAAG,EAAE,EAAC,CAAC,EAAtD,UAAU,QAAA,EAAE,aAAa,QAA6B,CAAC;IACxD,IAAA,KAAwC,QAAQ,CAAC,KAAK,CAAC,EAAtD,eAAe,QAAA,EAAE,kBAAkB,QAAmB,CAAC;IACxD,IAAA,KAAgD,QAAQ,CAAC,SAAS,CAAC,EAAlE,mBAAmB,QAAA,EAAE,sBAAsB,QAAuB,CAAC;IAG1E,SAAS,CAAC;QACR,IAAM,WAAW,GAAG;;;;;wBAElB,KAAA,kBAAkB,CAAA;wBAAC,qBAAM,kBAAkB,EAAE,EAAA;;wBAA7C,kBAAmB,SAA0B,EAAC,CAAC;;;;aAChD,CAAA;QACD,WAAW,EAAE,CAAC;IAChB,CAAC,EAAE,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAE1B,SAAS,CAAC;QACR,IAAM,oBAAoB,GAAG;;;;;6BACvB,eAAe,EAAf,wBAAe;wBACL,qBAAM,YAAY,EAAE,EAAA;;wBAA1B,GAAG,GAAG,SAAoB;wBAChC,YAAY,CAAC,GAAG,CAAC,CAAC;;;;;aAErB,CAAA;QACD,oBAAoB,EAAE,CAAC;IACzB,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC;IAEtB,SAAS,CAAC;QACR,IAAM,gBAAgB,GAAG;;;;;6BAEjB,eAAe,EAAf,wBAAe;wBACE,qBAAM,UAAU,EAAE,EAAA;;wBAA7B,QAAQ,GAAG,SAA4B;wBAC7C,aAAa,uBACR,UAAU,KACb,OAAO,EAAG,QAAQ,IAClB,CAAC;;;;;aAEV,CAAA;QACD,gBAAgB,EAAE,CAAC;IACrB,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IAEhB,yCAAyC;IACzC,IAAM,kBAAkB,GAAG,UAAC,GAAS;QACnC,IAAM,mBAAmB,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAA;QAC5C,sBAAsB,CAAC,mBAAmB,CAAC,CAAC;IAC9C,CAAC,CAAA;IAED,IAAM,kBAAkB,GAAG;;;;YAErB,WAAW,GAAG,KAAK,CAAC;YAElB,YAAY,GAAG,mBAAmB,CAAC;YACzC,IAAI,YAAY,KAAK,MAAM,EAAE;gBACzB,WAAW,GAAG,CAAC,CAAC,CAAA,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,0CAAE,IAAI,CAAA,CAAC;aACzC;iBAAM,IAAI,YAAY,KAAK,QAAQ,EAAE;gBAClC,WAAW,GAAG,CAAC,CAAC,CAAA,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,0CAAE,MAAM,CAAA,CAAC;aAC3C;YACD,sBAAO,WAAW,EAAC;;SACpB,CAAA;IAED,IAAM,YAAY,GAAG;;;;;;oBAGT,YAAY,GAAG,mBAAmB,CAAC;yBACrC,CAAA,YAAY,KAAK,MAAM,CAAA,EAAvB,wBAAuB;oBACK,qBAAM,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,EAAA;;oBAAxD,MAAM,GAAgB,SAAkC;oBACxD,cAAY,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC;oBAC1C,sBAAO,WAAS,EAAC;;yBACR,CAAA,YAAY,KAAK,QAAQ,CAAA,EAAzB,wBAAyB;oBACN,qBAAM,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,EAAA;;oBAA1D,MAAM,GAAgB,SAAoC;oBAC1D,cAAY,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC;oBAC1C,sBAAO,WAAS,EAAC;;;;oBAGrB,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,KAAG,CAAC,CAAC;;;;;SAE5C,CAAA;IAED,IAAM,UAAU,GAAG;;;;;;oBAEP,YAAY,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;oBACrB,qBAAM,YAAY,CAAC,WAAW,EAAE,EAAA;;oBAAtD,kBAAkB,GAAI,SAAgC;oBACtD,aAAa,GAAG,kBAAkB,CAAC,QAAQ,CAAC;oBAC5C,aAAa,GAAY,MAAM,CAAC,aAAa,CAAC,CAAC;oBACrD,sBAAO,aAAa,CAAC,cAAc,EAAE,EAAC;;;oBAEtC,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,KAAG,CAAC,CAAC;;;;;SAE5C,CAAA;IAGD,IAAM,OAAO,GAAG,UAAO,MAAY;;;;;oBAE3B,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACjB,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBACxB,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;oBAChB,SAAS,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;oBAGvC,YAAY,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC;oBACnC,qBAAM,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC,EAAA;;oBAA/C,KAAK,GAAG,SAAuC;oBAGlC,qBAAM,YAAY,CAAC,aAAa,EAAA;;oBAA7C,UAAU,GAAG,SAAgC;oBAGjC,qBAAM,YAAY,CAAC,cAAc,EAAE,EAAA;;oBAA/C,SAAS,GAAG,SAAmC;oBAG/C,EAAE,GAAG,IAAI,EAAE,EAAE,CAAC;oBAEpB,yBAAyB;oBACzB,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBAEjB,UAAU,GAAE,+CAES,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,oGAED,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,qPAQnE,GAAG,IAAI,GAAG,mYAUlB,CAAA;oBAGI,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBAE9D,iDAAiD;oBACjD,EAAE,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;oBAGvB,YAAY,GAAG,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;oBACtD,MAAM,GAAyB,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAIvE,YAAY,GAAG,IAAI,UAAU,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;oBAE3C,sEAAsE;oBACtE,EAAE,CAAC,UAAU,CACX,WAAW,CAAC,iBAAiB,EAC7B,MAAM,EACN,YAAY,CACb,CAAA;oBAED,kFAAkF;oBAClF,EAAE,CAAC,SAAS,CAAC,IAAI,QAAQ,CACvB,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,EAC3B,IAAI,KAAK,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CACrF,CAAC,CAAC;oBAEH,0BAA0B;oBAC1B,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;yBAEF,aAAa;oBACrC,qBAAM,KAAK,CAAC,gBAAgB,CAAC;6BACxB,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,EAAA;;oBAFlC,aAAa,GAAG,cAAI,aAAa,WACrC,SACsC,KACvC;oBAED,oDAAoD;oBACpD,EAAE,CAAC,WAAW,CAAC,GAAG,EAAE,EAAC,KAAK,EAAE,CAAC,CAAC,WAAW,CAAC,iBAAiB,CAAC,GAAG,EAAE,EAAC,KAAK,EAAE,CAAC,CAAC,IAAI;4CAC7C;gDACE,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC;oDACd,CAAC,aAAa,EAAE,WAAW,CAAC;oDAC5B,CAAC,OAAO,EAAE,GAAG,CAAC;iDACf;6CACR;yCACJ,CAAC,EAAC;6BACJ,CAAC;qBACT,CACN,CAAC;oBAEhB,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;oBAE1C,oCAAoC;oBACpC,qBAAM,EAAE,CAAC,QAAQ,CAAC,aAAa,EAAE,UAAU,CAAC,EAAA;;oBAD5C,oCAAoC;oBACpC,SAA4C,CAAC;oBAC7C,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;oBAEzC,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;oBACnB,qBAAM,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,EAAA;;oBAAvC,UAAU,GAAG,SAA0B;oBAC7C,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBAE7B,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;oBAC1B,qBAAM,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAA;;oBAArC,MAAM,GAAG,SAA4B;oBAE3C,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;oBAC9B,KAAK,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;;;;SAE5B,CAAA;IAGF,OAAO,CACL,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAC/B;MAAA,CAAC,IAAI,CACH;QAAA,CAAC,KAAK,CAAC,iBAAiB,EAAE,KAAK,CAC/B;QAAA,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,2BAA2B,EAC5D;QAAA,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EACtC;MAAA,EAAE,IAAI,CAEN;;MAAA,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAC3B;QAAA,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAC1B;;QACF,EAAE,EAAE,CAEJ;;QAAA,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAChC;YAAA,CAAC,CAAC,CACA;;YACF,EAAE,CAAC,CACH;YAAA,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAChC;cAAA,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,kBAAkB,CAAC,EACpF;gBAAA,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CACtB;YAAA,EAAE,CAAC,CACL;UAAA,EAAE,GAAG,CACH;YAAA,CAAC,CAAC,EAAE,CAAC,IAAI,IAAI,eAAe,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC,EAAE,EAAE,GAAG,CAAC,CAC1G;YAAA,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,sBAAsB,EAAE,CAAC,CACvE;YAAA,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,kCAAkC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,qBAAqB,CAAE,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CACtI;YAAA,CAAC,CAAC,CAAC,sHAAsH,EAAE,CAAC,CAC9H;UAAA,EAAE,GAAG,CAAC,CACN;UAAA,CAAC,eAAe,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,EAAE,EAAE,GAAG,CAAC,CAEvG;;MAAA,EAAE,IAAI,CAEN;;MAAA,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAEjC;;MAAA,EAAE,MAAM,CACV;IAAA,EAAE,GAAG,CAAC,CACP,CAAA;AACH,CAAC,CAAA;AAED,eAAe,IAAI,CAAA","sourcesContent":["\nimport MintNFT from '../components/MintNFT';\nimport Head from 'next/head'\nimport type { NextPage } from 'next'\nimport styles from '../styles/Home.module.css'\nimport { useState, useEffect } from \"react\";\nimport WalletInfo from '../components/WalletInfo';\nimport {\n  Assets,\n  Address, \n  ByteArrayData,\n  Cip30Handle,\n  Cip30Wallet,\n  ConstrData, \n  hexToBytes, \n  NetworkParams,\n  Program,\n  Value, \n  TxOutput,\n  Tx,\n  WalletHelper} from \"@hyperionbt/helios\";\n\ndeclare global {\n  interface Window {\n      cardano:any;\n  }\n}\n\nconst Home: NextPage = () => {\n\n  const optimize = false;\n  const networkParamsUrl = \"https://d1t0d7c2nekuk0.cloudfront.net/preprod.json\";\n  const [walletAPI, setWalletAPI] = useState<undefined | any>(undefined);\n  const [tx, setTx] = useState({ txId : '' });\n  const [walletInfo, setWalletInfo] = useState({ balance : ''});\n  const [walletIsEnabled, setWalletIsEnabled] = useState(false);\n  const [whichWalletSelected, setWhichWalletSelected] = useState(undefined);\n  \n\n  useEffect(() => {\n    const checkWallet = async () => {\n      \n      setWalletIsEnabled(await checkIfWalletFound());\n    }\n    checkWallet();\n  }, [whichWalletSelected]); \n\n  useEffect(() => {\n    const enableSelectedWallet = async () => {\n      if (walletIsEnabled) {\n        const api = await enableWallet();\n        setWalletAPI(api);\n      }\n    }\n    enableSelectedWallet();\n  }, [walletIsEnabled]); \n\n  useEffect(() => {\n    const updateWalletInfo = async () => {\n\n        if (walletIsEnabled) {\n            const _balance = await getBalance() as string;\n            setWalletInfo({\n              ...walletInfo,\n              balance : _balance\n            });\n        }           \n    }\n    updateWalletInfo();\n  }, [walletAPI]);\n\n  // user selects what wallet to connect to\n  const handleWalletSelect = (obj : any) => {\n    const whichWalletSelected = obj.target.value\n    setWhichWalletSelected(whichWalletSelected);\n  }\n\n  const checkIfWalletFound = async () => {\n      \n    let walletFound = false;\n\n    const walletChoice = whichWalletSelected;\n    if (walletChoice === \"nami\") {\n        walletFound = !!window?.cardano?.nami;\n    } else if (walletChoice === \"eternl\") {\n        walletFound = !!window?.cardano?.eternl;\n    } \n    return walletFound;\n  }\n\n  const enableWallet = async () => {\n\n      try {\n        const walletChoice = whichWalletSelected;\n        if (walletChoice === \"nami\") {\n            const handle: Cip30Handle = await window.cardano.nami.enable();\n            const walletAPI = new Cip30Wallet(handle);\n            return walletAPI;\n          } else if (walletChoice === \"eternl\") {\n            const handle: Cip30Handle = await window.cardano.eternl.enable();\n            const walletAPI = new Cip30Wallet(handle);\n            return walletAPI;\n          } \n    } catch (err) {\n        console.log('enableWallet error', err);\n    }\n  }\n\n  const getBalance = async () => {\n    try {\n        const walletHelper = new WalletHelper(walletAPI);\n        const balanceAmountValue  = await walletHelper.calcBalance();\n        const balanceAmount = balanceAmountValue.lovelace;\n        const walletBalance : BigInt = BigInt(balanceAmount);\n        return walletBalance.toLocaleString();\n    } catch (err) {\n        console.log('getBalance error: ', err);\n    }\n  }\n\n\n  const mintNFT = async (params : any) => {\n\n    const address = params[0];\n    const name = params[1];\n    const description = params[2];\n    const img = params[3];\n    const minAdaVal = new Value(BigInt(2000000));  // minimum Ada needed to send an NFT\n\n    // Get wallet UTXOs\n    const walletHelper = new WalletHelper(walletAPI);\n    const utxos = await walletHelper.pickUtxos(minAdaVal);\n \n    // Get change address\n    const changeAddr = await walletHelper.changeAddress;\n\n    // Determine the UTXO used for collateral\n    const colatUtxo = await walletHelper.pickCollateral();\n\n    // Start building the transaction\n    const tx = new Tx();\n\n    // Add the UTXO as inputs\n    tx.addInputs(utxos[0]);\n\n    const mintScript =`minting nft\n\n    const TX_ID: ByteArray = #` + utxos[0][0].txId.hex + `\n    const txId: TxId = TxId::new(TX_ID)\n    const outputId: TxOutputId = TxOutputId::new(txId, ` + utxos[0][0].utxoIdx + `)\n    \n    func main(ctx: ScriptContext) -> Bool {\n        tx: Tx = ctx.tx;\n        mph: MintingPolicyHash = ctx.get_current_minting_policy_hash();\n    \n        assetclass: AssetClass = AssetClass::new(\n            mph, \n            \"` + name + `\".encode_utf8()\n        );\n        value_minted: Value = tx.minted;\n    \n        // Validator logic starts\n        (value_minted == Value::new(assetclass, 1)).trace(\"NFT:1 \") &&\n        tx.inputs.any((input: TxInput) -> Bool {\n                                        (input.output_id == outputId).trace(\"NFT2: \")\n                                        }\n        )\n    }`\n    \n    // Compile the helios minting script\n    const mintProgram = Program.new(mintScript).compile(optimize);\n\n    // Add the script as a witness to the transaction\n    tx.attachScript(mintProgram);\n\n    // Construct the NFT that we will want to send as an output\n    const nftTokenName = ByteArrayData.fromString(name).toHex();\n    const tokens: [number[], bigint][] = [[hexToBytes(nftTokenName), BigInt(1)]];\n\n    // Create an empty Redeemer because we must always send a Redeemer with\n    // a plutus script transaction even if we don't actually use it.\n    const mintRedeemer = new ConstrData(0, []);\n\n    // Indicate the minting we want to include as part of this transaction\n    tx.mintTokens(\n      mintProgram.mintingPolicyHash,\n      tokens,\n      mintRedeemer\n    )\n\n    // Construct the output and include both the minimum Ada as well as the minted NFT\n    tx.addOutput(new TxOutput(\n      Address.fromBech32(address),\n      new Value(minAdaVal.lovelace, new Assets([[mintProgram.mintingPolicyHash, tokens]]))\n    ));\n\n    // Add the collateral utxo\n    tx.addCollateral(colatUtxo);\n\n    const networkParams = new NetworkParams(\n      await fetch(networkParamsUrl)\n          .then(response => response.json())\n    )\n\n    // Attached the metadata for the minting transaction\n    tx.addMetadata(721, {\"map\": [[mintProgram.mintingPolicyHash.hex, {\"map\": [[name, \n                                      {\n                                        \"map\": [[\"name\", name], \n                                                [\"description\", description],\n                                                [\"image\", img]\n                                              ]\n                                      }\n                                  ]]}\n                                ]]\n                        }\n                  );\n\n    console.log(\"tx before final\", tx.dump());\n\n    // Send any change back to the buyer\n    await tx.finalize(networkParams, changeAddr);\n    console.log(\"tx after final\", tx.dump());\n\n    console.log(\"Verifying signature...\");\n    const signatures = await walletAPI.signTx(tx);\n    tx.addSignatures(signatures);\n    \n    console.log(\"Submitting transaction...\");\n    const txHash = await walletAPI.submitTx(tx);\n    \n    console.log(\"txHash\", txHash);\n    setTx({ txId: txHash.hex });\n  \n   } \n\n\n  return (\n    <div className={styles.container}>\n      <Head>\n        <title>Helios Tx Builder</title>\n        <meta name=\"description\" content=\"Littercoin web tools page\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      <main className={styles.main}>\n        <h3 className={styles.title}>\n          Helios Tx Builder\n        </h3>\n   \n        <div className={styles.borderwallet}>\n            <p>\n              Connect to your wallet \n            </p>\n            <p className={styles.borderwallet}>\n              <input type=\"radio\" id=\"nami\" name=\"wallet\" value=\"nami\" onChange={handleWalletSelect}/>\n                <label>Nami</label>\n            </p>\n          </div>\n            {!tx.txId && walletIsEnabled && <div className={styles.border}><WalletInfo walletInfo={walletInfo}/></div>}\n            {tx.txId && <div className={styles.border}><b>Transaction Success!!!</b>\n            <p>TxId &nbsp;&nbsp;<a href={\"https://preprod.cexplorer.io/tx/\" + tx.txId} target=\"_blank\" rel=\"noopener noreferrer\" >{tx.txId}</a></p>\n            <p>Please wait until the transaction is confirmed on the blockchain and reload this page before doing another transaction</p>\n          </div>}\n          {walletIsEnabled && !tx.txId && <div className={styles.border}><MintNFT onMintNFT={mintNFT}/></div>}\n\n      </main>\n\n      <footer className={styles.footer}>\n\n      </footer>\n    </div>\n  )\n}\n\nexport default Home"]}